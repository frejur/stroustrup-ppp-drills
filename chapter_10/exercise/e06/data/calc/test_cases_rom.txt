# Testing exception handling
E_1 Hex_invalid                                      0xFFq
E_2 Hex_incomplete                                   0x
E_3 Expression_too_long                              I ; I ; I ; I ; I ; I ; I ; I ; I ; I ; I ; I
E_3 Expression_too_long                              I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I + I
E_4 Token_bad                                        II&
E_5 Primary_expected                                 ()
E_6 Divide_by_zero                                   ( I + II ) / (III - IV - V + VI)
E_7 Get_undefined                                    undefined_name
E_8 Assign_to_undefined                              undefined_name = I
= I                                                  const a = I
E_9 Reassign_constant                                a = II
= I                                                  let b = I
E_10 Redeclaration                                   let b = II
E_11 Name_expected_in_declaration                    let I
E_11 Name_expected_in_declaration                    const II
E_12 Assignment_operator_expected_in_declaration     let c I
E_12 Assignment_operator_expected_in_declaration     const d I
= I                                                  let e = I
E_13 Assignment_operator_invalid_context             I + e = II
= III                                                const f = III
E_13 Assignment_operator_invalid_context             I + f = IIII
E_14 Parentheses_expected_at_expression_end          (I + II
E_15 Parentheses_expected_at_square_root_start       sqrt III
E_16 Parentheses_expected_at_square_root_end         sqrt(IV
E_17 Square_root_of_negative_value                   sqrt(-V)
E_18 Parentheses_expected_at_power_of_start          pow VI
E_19 Parentheses_expected_at_power_of_end            pow(VII, II
E_20 Comma_expected_after_power_of_base              pow(VII)
E_21 Command_not_last_in_chain                       from x; II
E_21 Command_not_last_in_chain                       to y; II
E_22 Quit_while_reading                              quit
E_23 Modulo_divide_by_zero                           I % N
= I                                                  III % II
# Floating-point values only
# E_24 Modulus_on_floating_point                     3 % 2.5

# Testing arithmetic expressions
= I                                                  III % II
= MMCDI                                              -XXV - (LIII + (XXXVII * -LXVII))
= -XXXVII                                            -XXVIII - (LXXXV - LXXVI)
= -LIII                                              ((-XXX + ((XXXV + -LVIII))))
= -CXXVII                                            ((-LXXXIII + ((-XIX - XXV))))
= CLVII                                              XLIX - (-XXXII - LXXVI)
= -MDXXII                                            -LXX - (-LXVI * -XXII)
= -CCX                                               -XLV + (XXXIII * (LXXXI - LXXXVI))
= -MMMMDCCLXXXVIII                                   LXXXIV * (-XI + (-XIII - (LXIX - XXXVI)))
= -LXXII                                             (XXXIII + (-LXVII + -XXXVIII))
= MCLVI                                              -XCVIII + (-VI - (LXX * (XI + -XXIX)))
= LXXIX                                              -XXVI - ((-XLVIII + -LVII))
= -I                                                 pow((-XLVIII / XLVIII), (XXXIX + -IV))
= XCVIII                                             XXVII - (-LXXI + (pow((-XLII - (XLVII + -LXXXIX)), LXIII)))
= MMDVI                                              -XCV + (pow((-LI), II))
= LXX                                                -I + (LXXI / pow(-II - (XLVII), N))
= -LXXVI                                             LXXIV + pow(-LXII + (-LXXXVIII), I)
= -DXX                                               -L + (-L - pow(XLII * X, I))
= -LXXXIII                                           LXXXIII + (-XCI + -LXXV)
= -XXXV                                              -XVI + (XLIV - LXIII)
= -LII                                               -XLIX - (-I + sqrt(XVI))
= XXXVIII                                            (-XXXIII + (XLIV + XXVII))
= -CV                                                XXIX - (LXXI + (LXIII))
= -MMMMDCXX                                          XXXIII * (((-XCVI + -XLIV)))
= -XLV                                               -LIX - (LXIX + -LXXXIII)
= CCXLVIII                                           (V - (-XXVII * (-LIX + LXVIII)))
